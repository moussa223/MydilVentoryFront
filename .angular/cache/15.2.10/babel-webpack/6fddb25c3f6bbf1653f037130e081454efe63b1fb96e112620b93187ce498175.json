{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.token = null;\n      this.tokenKey = 'usingsecretkeyforapp'; // même clé utilisée au niveau du back\n      this.apiLoginUrl = 'https://localhost:7012/api/AuthContoller/Login'; //  l'URL de l' API\n      this.model = {\n        loginDto: {\n          userNameOrEmail: '',\n          password: ''\n        }\n      };\n    }\n    login() {\n      // Faites une requête à votre API pour obtenir le token\n      return this.http.post(this.apiLoginUrl, this.model).subscribe(response => {\n        // Si la requête réussit, enregistrez le token\n        this.token = response.data.accessToken.token; // Assurez-vous que la structure de la réponse correspond à votre API\n        localStorage.setItem(this.tokenKey, this.token);\n        alert('Connexion reussi');\n        console.log(response);\n        this.model.loginDto.userNameOrEmail = '';\n        this.model.loginDto.password = '';\n        this.router.navigate(['/Tableau']);\n      }, error => {\n        // Gérez les erreurs de connexion ici\n        console.error('Erreur de connexion', error, error.status, error.error);\n        alert('Les identifiants Saisis sont incorrects');\n      });\n    }\n    // Vérifier si l'utilisateur est connecté ou pas,  si un token existe ou pas\n    isLoggedIn() {\n      // Vérifiez si le token existe dans le localStorage pour déterminer si l'utilisateur est connecté\n      const token = localStorage.getItem(this.tokenKey);\n      if (token) {\n        const jwtHelper = new JwtHelperService();\n        // Vérifiez si le token est valide\n        return !jwtHelper.isTokenExpired(token);\n      }\n      return false;\n    }\n    // gestion de la deconnexion\n    logout() {\n      // Vous pouvez ici effectuer la logique de déconnexion\n      localStorage.clear();\n      // Par exemple, effacer le token\n      this.token = null;\n      this.router.navigate(['/']);\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}